Object Oriented Programming:
"An organized method of writing codes."
It involves:
--------------------------------------------------------------------------------------------------------------------
1. Classes                             |   2. Objects                                   |   3. Methods
Class is like a blueprint for the      |   Objects are the entities in the world.       |   These are the functions
entities.                              |                                                |   written in the classes
                                       |                                                |   for the properties.
---------------------------------------------------------------------------------------------------------------------
For example:
Toyota Car company have created a blueprint for the other cars building to follow that particular blueprint.
So, the blueprint is the class and the other cars which have to follow that blueprint are called the objects.

Access Modifiers:
--------------------------------------------------------------------------------------------------------------------
1. Private                             |   2. Public                                   |   3. Protected
Data & member functions are            |   Data and methods are accessible             |                           
accessible only inside the class.      |   to everyone.                                |    Data & methods are 
                                       |   to everyone.                                |    accessible only inside 
                                       |                                               |    class & its derived 
                                       |                                               |     class.
---------------------------------------------------------------------------------------------------------------------

Setters & Getters:
Setters and getters are very important as they help us to access the private members/member functions easily out of
the class aswell.



Constructors:
It is a special method invoked automatically at the time of object creation. It is used for the initialization.
Properties of Constructor:
Same name as class.
Do not have the return type.
Only called once at the time of object creation.
Memory allocation happens when constructor is called.
Types of Constructor:
1. Parameterized Constructor.         (Takes the arguments to initialize the properties)
2. Non-Parameterized Constructor.     (No paramters initialize the properties with default values)
3. Copy Constructor.                  (Create a new object as the copy of other object)
Copy Constructor is the special type of constructor that used to copy properties of one object into another.
For example:
Teacher T1;
Teacher(T2)
T1                           exactly same                           T2
name                            copy                                name
age                          as T1 exists                           age
salary                                                              salary
Teacher(Teacher &orgobj){                        Call by reference
    this->name  = orgobj.name;                   this cannot be done with call by value because it will couse infinite recursive calls 
    this->age  = orgobj.age;
}

Shallow Copy                                                            Deep Copy
Shallow copy of an object copies all                                    Deep copy on the other hand, not only 
the member values from one object to                                    copies the member values but also make
another.                                                                copies of any dynamically allocated memory
                                                                        that the member points too.
Let's dive deep:
In shallow copy:
So when we are changing the object property of S2.property then the S1.property gets changed automatically although we did'nt wanted that change. This is happening because of same
memory location they share with each other.
But in deep copy this problem can be solved easily:
Student S1;
Student(S2)
S1                           exactly same                           S2
name                         memory location                        name                        This is all the process being done in the heap.
cgpaptr                      as S1 exists                           cgpaptr                     cgpaptr points the different memory location suppose 555555 for S1
555555                                                              666666                      and 666666 for S2.So they are pointing different memory locations.
So when we are changing the object property of S2.property then the S1.property do not get changed. This is happening because of different 
memory location they have due to the deep copy.


Diving deep to the memory allocation:
Static Memory allocation is done in the stack by default like it is done in the compile time.
    Stack                    
|             |             Suppose                                              
|             |             int x =5;
|  int x =5   |
Dynamic Memory Allocation is carried out in the heap like
new int[5]   now the allocation has been set at the runtime

Constructor Overloading:
Multiple constructor can be made in a single code with differnt types of parameters depending upon the requirements.So, whichever constructor we call, we know
which type of parameters are given and there sequence as well. This all process of multiple constructor calling at the same time is called the constructor 
overloading. It is one of the example of polymorphism.


Pointers in OOP:
this pointer:
this is a special type of pointer in c++ that points to the current object.
this->prop is same as *(this).prop
Example:
Teacher(string name , string address){                      Here Teacher is the constructor and this-> tells the compiler that this is the object member 
    this->name  = name ;                                    while other one is the constructor parameter.
    this->address  = address ;    
}
Now diving deep:
Objects of the class occupies the memory by allocating the different memory allocations to its member/member functions. this pointer directly points the 
memory that involves the member/member functions. 
Suppose                                                                    Same as:
int x = 10;                                                                *(this).property    represents the object.property
int * ptr = x;        * = dereferncing operater
*ptr                  *ptr will print the 10

Pillars of OOP:
1. Encapsulation.
2. Inheritance.
3. Polymorphism
4. Abstraction.

1. Encapsulation:
It is the process of wrapping up the data members and member functions in a single unit class.
Data Properties    +    Member Functions    = Class
Uses:
Data Hiding (Used to improve the security)
It is the process of making the sensitive member/member function private/protected.






